{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,MAAM,kCAAY,CAAA,GAAA,kBAAM,EAAE,IAAM,wBAA4B;IAAE,KAAK;AAAM;AACzE,MAAM,8BAAQ,CAAC;IACb,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,eAAO,EAAE;QAAC;YAAE,MAAM;YAAI,MAAM;YAAU,MAAM,EAAE;QAAC;KAAE;IAC7E,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,eAAO,EAAE,EAAE;IACvC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,eAAO,EAAE;IACvC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,eAAO,EAAE;QACrC,QAAQ;YACN,OAAO;gBAAC;gBAAG;gBAAG;aAAE;QAClB;QACA,MAAM;YACJ,SAAS;gBAAC;gBAAM;gBAAM;aAAK;YAC3B,UAAU;gBACR,eAAe;gBACf,OAAO;gBACP,MAAM;gBACN,aAAa;gBACb,WAAW;gBACX,OAAO;oBAAC;oBAAG;oBAAK;oBAAK;iBAAI;YAC3B;QACF;QACA,SAAS;YACP,QAAQ;YACR,WAAW;YACX,GAAG;gBACD,WAAW,SAAU,CAAC;oBACpB,IAAI,OAAO,MAAM,aACf,OAAO,EAAE,OAAO,CAAC,KAAK;oBAExB,OAAO;gBAET;YACF;QACF;IACF;IAEA,CAAA,GAAA,gBAAQ,EAAE;QACR,IAAI,MAAM,KAAK,EAAE,SAAS,OACxB,CAAA,GAAA,cAAE,EAAE,GAAG,CAAC,CAAC,EAAE,MAAM,KAAK,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,CAAA;YAClC,KAAK,OAAO,UAAU,UAAU,KAAK,OAAO;YAC5C,KAAK,OAAO,UAAU,UAAU,KAAK,OAAO;YAC5C,WAAW;QACb;IAEF,2BAA2B;IAC3B,wFAAwF;IACxF,8CAA8C;IAC9C,OAAO;IACP,KAAK;IACP,GAAG;QAAC,MAAM,KAAK;KAAC;IAEhB,oBAAoB;IACpB,2BAA2B;IAC3B,gDAAgD;IAChD,kCAAkC;IAClC,mBAAmB;IACnB,8BAA8B;IAC9B,4BAA4B;IAC5B,qDAAqD;IACrD,yCAAyC;IACzC,mBAAmB;IACnB,iFAAiF;IACjF,+BAA+B;IAC/B,YAAY;IACZ,kCAAkC;IAClC,4BAA4B;IAC5B,eAAe;IACf,SAAS;IACT,WAAW;IACX,wEAAwE;IACxE,8EAA8E;IAE9E,qBACE,gBAAC,CAAA,GAAA,cAAM;QAAE,SAAS;kBAChB,cAAA,gBAAC;YACC,SAAS;gBACP,GAAG,OAAO;gBACV,QAAQ;YACV;YACA,QAAQ;YACR,MAAK;;;AAIb;IAEA,2CAAe","sources":["component/barChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport dynamic from 'next/dynamic';\r\nimport { parseContent } from \"../utils/stringUtils\";\r\nimport Loading from \"../loading/Loading\";\r\nimport API from \"../utils/API\";\r\n\r\nconst ApexChart = dynamic(() => import('react-apexcharts'), { ssr: false });\r\nconst Chart = (props) => {\r\n  const [series, setSeries] = useState([{ name: '', type: 'column', data: [] }])\r\n  const [labels, setLabels] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [options, setOptions] = useState({\r\n    stroke: {\r\n      width: [0, 5, 1],\r\n    },\r\n    fill: {\r\n      opacity: [0.85, 0.85, 0.54],\r\n      gradient: {\r\n        inverseColors: false,\r\n        shade: 'light',\r\n        type: \"vertical\",\r\n        opacityFrom: 0.85,\r\n        opacityTo: 0.55,\r\n        stops: [0, 100, 100, 100]\r\n      }\r\n    },\r\n    tooltip: {\r\n      shared: true,\r\n      intersect: false,\r\n      y: {\r\n        formatter: function (y) {\r\n          if (typeof y !== \"undefined\") {\r\n            return y.toFixed(0) + \" points\";\r\n          }\r\n          return y;\r\n\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (props.xdata?.type === \"API\") {\r\n      API.get(`${props.xdata?.url}`).then(res => {\r\n        res?.value?.labels && setLabels(res?.value?.labels)\r\n        res?.value?.series && setSeries(res?.value?.series)\r\n        setLoading(false)\r\n      })\r\n    }\r\n    // loadSeries().then(r => {\r\n    //   parseContent(props.xaxis || [], (r) => Array.isArray(r) && setLabels).then((l) => {\r\n    //     setTimeout(() => setLoading(false), 10)\r\n    //   })\r\n    // })\r\n  }, [props.xdata])\r\n\r\n  // useEffect(() => {\r\n  //   const _series = series\r\n  //   Variables.get(props.custom?.xaxis, (l) => {\r\n  //     console.log(\"variables\", l)\r\n  //     setLabels(l)\r\n  //     const plots = [0, 1, 2]\r\n  //     plots.map((k, i) => {\r\n  //       const variable = props.custom?.[\"yaxis\" + i]\r\n  //       Variables.get(variable, (s) => {\r\n  //         if (s) {\r\n  //           _series[i] = { data: s || [], type: props.custom?.[\"typeAxis\" + i] }\r\n  //           setSeries(_series)\r\n  //         }\r\n  //         // console.log(_series)\r\n  //         setLoading(false)\r\n  //       }, [])\r\n  //     })\r\n  //   }, [])\r\n  // }, [props.custom?.yaxis0, props.custom?.yaxis1, props.custom?.yaxis2,\r\n  // props.custom?.typeAxis0, props.custom?.typeAxis1, props.custom?.typeAxis2])\r\n\r\n  return (\r\n    <Loading loading={loading}>\r\n      <ApexChart\r\n        options={{\r\n          ...options,\r\n          labels: labels\r\n        }}\r\n        series={series}\r\n        type=\"bar\"\r\n      />\r\n    </Loading>\r\n  )\r\n}\r\n\r\nexport default Chart;"],"names":[],"version":3,"file":"barChart.adb99ce8.js.map"}